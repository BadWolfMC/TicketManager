package com.github.hoshikurama.ticketmanager.spigotimport com.github.hoshikurama.ticketmanager.common.ConfigStateimport com.github.hoshikurama.ticketmanager.common.TMLocaleimport com.github.shynixn.mccoroutine.asyncDispatcherimport net.md_5.bungee.api.chat.TextComponentimport org.bukkit.Bukkitimport org.bukkit.ChatColorimport org.bukkit.command.CommandSenderimport org.bukkit.entity.Playerimport java.util.*import java.util.logging.Levelimport kotlin.coroutines.CoroutineContextinternal fun consoleLog(level: Level, message: String) = Bukkit.getLogger().log(level, ChatColor.stripColor(message))internal val mainPlugin: TicketManagerPlugin    get() = TicketManagerPlugin.plugininternal val configState: ConfigState    get() = mainPlugin.configStateIinternal val asyncContext: CoroutineContext    get() = mainPlugin.asyncDispatcherinternal fun addColour(s: String) = ChatColor.translateAlternateColorCodes('&', s)internal fun pushMassNotify(permission: String, localeMsg: (TMLocale) -> String) {    Bukkit.getConsoleSender().sendMessage(localeMsg(mainPlugin.configStateI.localeHandler.consoleLocale))    Bukkit.getOnlinePlayers()        .asSequence()        .filter { it.has(permission) }        .forEach {            val message = it.toTMLocale()                .run(localeMsg)                .run(::addColour)            it.sendMessage(message)        }}internal fun Player.has(permission: String) = mainPlugin.perms.has(this, permission)internal fun CommandSender.has(permission: String): Boolean = if (this is Player) has(permission) else trueinternal fun Player.toTMLocale() = configState.localeHandler.getOrDefault(locale)internal fun CommandSender.toTMLocale() = if (this is Player) toTMLocale() else configState.localeHandler.consoleLocaleinternal fun CommandSender.toUUIDOrNull() = if (this is Player) this.uniqueId else nullinternal fun UUID?.toName(locale: TMLocale): String {    if (this == null) return locale.consoleName    return this.run(Bukkit::getOfflinePlayer).name ?: "UUID"}internal fun postModifiedStacktrace(e: Exception) {    val players = Bukkit.getOnlinePlayers()        .asSequence()        .filter { it.has("ticketmanager.notify.warning") }    val console = Bukkit.getConsoleSender()    val buildMessage: (TMLocale) -> TextComponent = { locale ->        val sentComponent = TextComponent("")        // Creates header        listOf(            locale.stacktraceLine1,            locale.stacktraceLine2.replace("%exception%", e.javaClass.simpleName),            locale.stacktraceLine3.replace("%message%", e.message ?: "?"),            locale.stacktraceLine4        )            .map(::addColour)            .map(::TextComponent)            .forEach { sentComponent.addExtra(it) }        // Adds entries        e.stackTrace            .filter { it.className.startsWith("com.hoshikurama.github.ticketmanager") }            .map {                locale.stacktraceEntry                    .replace("%method%", it.methodName)                    .replace("%file%", it.fileName ?: "?")                    .replace("%line%", "${it.lineNumber}")            }            .map(::addColour)            .map(::TextComponent)            .forEach { sentComponent.addExtra(it) }        sentComponent    }    console.run {        buildMessage(this.toTMLocale())            .let{ spigot().sendMessage(it) }    }    players.forEach { p ->        buildMessage(p.toTMLocale())            .let { p.spigot().sendMessage(it) }    }}